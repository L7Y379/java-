package abstract_test;

/**
 * 在面向对象的概念中，所有的对象都是通过类来描绘的，但是反过来，并不是所有的类都是用来描绘对象的，如果一个类中没有包含足够的信息来描绘一个具体的对象，这样的类就是抽象类。
 *
 * 抽象类除了不能实例化对象之外，类的其它功能依然存在，成员变量、成员方法和构造方法的访问方式和普通类一样。
 *
 * 由于抽象类不能实例化对象，所以抽象类必须被继承，才能被使用。也是因为这个原因，通常在设计阶段决定要不要设计抽象类。
 *
 * 父类包含了子类集合的常见的方法，但是由于父类本身是抽象的，所以不能使用这些方法。
 */
public abstract class Employee
{
    private String name;
    private String address;
    private int number;

    public abstract double computePay();

    //其余代码
}
//声明抽象方法会造成以下两个结果：
//
//        如果一个类包含抽象方法，那么该类必须是抽象类。
//        任何子类必须重写父类的抽象方法，或者声明自身为抽象类。
//        继承抽象方法的子类必须重写该方法。否则，该子类也必须声明为抽象类。最终，必须有子类实现该抽象方法，否则，从最初的父类到最终的子类都不能用来实例化对象。
//
//        如果Salary类继承了Employee类，那么它必须实现computePay()方法：