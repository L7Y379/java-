package test_user;
/**
 * 用户测试类
 *
 * 对于当前程序来说：
 * User类中的age属性在外部程序中可以随意访问，导致age属性的不安全。
 * 	一个User对象表示一个用户，用户的年龄不可能是负数，以下程序当中年龄值
 * 	为负数，程序运行的时候并没有报错，这是当前程序中存在的缺陷
 *
 * 对于面向对象来说，具有三大特征：
 * -封装
 * -继承
 * -多态
 *
 * 当前主要讲解的是封装机制。为什么要封装？封装能给我们带来哪些好处？
 *
 * 	封装的好处：
 *
 * 		1.封装之后，对于那个事物来说，看不到那个事物复杂的一面，只能看到该事物简单的一面，
 * 		复杂性封装，对外提供简单的操作入口。照相机就是一个很好的封装的案例，照相机的实现原理
 * 		非常复杂，但是对于使用照相机的人来说，操作起来是非常方便、非常便捷的。还有类似电视机也是封装的，
 * 		电视机的内部实现非常复杂，但是对于使用者来说，不需要关心内部的实现原理，只需要会操作遥控器就行。
 *
 * 		2.封装之后，才会形成真正的“对象”，真正的“独立体”
 *
 * 		*3.封装就意味着以后的程序可以重复使用，并且这个事物的适应性较强，任何场合都可以使用。
 *
 * 		*4.封装以后，对于事物本身，提高了安全性【安全级别高】
 *
 *
 * @author ASUS
 *
 */
public class UserTest {
    public static void main(String[] args) {

        // 创建User对象
        User user = new User();

        // 访问age
        // 读取年龄(get)
        System.out.println("该用户年龄为：" + user.age);

        // 修改年龄（set）
        user.age = 20;
        System.out.println("该用户年龄为：" + user.age);

        //修改年龄
        //这里的age属性显然是完全暴露给外部程序的，对于程序员来说可以操作User对象中所有的细节。导致User中部分数据的不安全。
        //不建议这样，建议对User类进行封装，建议在外部程序中不能随意访问User对象当中的属性，以保证属性的安全。

        user.age=-100;
        System.out.println("该用户年龄为：" + user.age);




    }
}
